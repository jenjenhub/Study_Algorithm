// 더하기 사이클

// 원래 수로 돌아올 때까지 연산을 반복하는 문제

// 문제
// 0보다 크거나 같고, 99보다 작거나 같은 정수가 주어질 때 다음과 같은 연산을 할 수 있다. 먼저 주어진 수가 10보다 작다면 앞에 0을 붙여 두 자리 수로 만들고, 각 자리의 숫자를 더한다. 그 다음, 주어진 수의 가장 오른쪽 자리 수와 앞에서 구한 합의 가장 오른쪽 자리 수를 이어 붙이면 새로운 수를 만들 수 있다. 다음 예를 보자.

// 26부터 시작한다. 2+6 = 8이다. 새로운 수는 68이다. 6+8 = 14이다. 새로운 수는 84이다. 8+4 = 12이다. 새로운 수는 42이다. 4+2 = 6이다. 새로운 수는 26이다.

// 위의 예는 4번만에 원래 수로 돌아올 수 있다. 따라서 26의 사이클의 길이는 4이다.

// N이 주어졌을 때, N의 사이클의 길이를 구하는 프로그램을 작성하시오.

// 입력
// 첫째 줄에 N이 주어진다. N은 0보다 크거나 같고, 99보다 작거나 같은 정수이다.

// 출력
// 첫째 줄에 N의 사이클 길이를 출력한다.

// 예제 입력 1
// 26
// 예제 출력 1
// 4

// 예제 입력 2
// 55
// 예제 출력 2
// 3

// 예제 입력 3
// 1
// 예제 출력 3
// 60

// 예제 입력 4
// 0
// 예제 출력 4
// 1

// 26 (08) 68 (14) 84 (12) 42 (06) 26  - 4
// 55 (10) 50 (05) 05 (05) 55 - 3
// 1 (01) 01 (01) 11 (02) 12 (03) 23 (05) 35 (08) ...
// 0 (00) 00 - 1
// 위에 방식으로 진행됨.

// 더하는 값 선언 오른쪽자리 연산하는 값 선언 마지막 카운트하는 값 선언
// a. 초기값(===새로운 수) b. 각 자릿수 더하기 c. 새로운 수
// 1의 자리에 있는 수 구하기: num % 10
// 10의 자리에 있는 수 구하기: Math.floor(num / 10)
// 1의 자리에 있는 수 10의 자리 수로 만들기 : (num % 10) * 10
// b식에서 각 자릿수를 더할 때 '1의 자릿수'를 '10의 자릿수'로 만들어 주기 위해 '10의 자릿수'식 사용
// b식에서 각 자릿수를 더한 결과값의 '1의 자릿수'를 구하기 위해 '1의 자릿수'식 사용
// 두 값을 합하면 '새로운 수'를 구할 수 있다

const fs = require("fs");
const inputFile = process.platform === "linux" ? "/dev/stdin" : "./input.txt";
let input = fs.readFileSync(inputFile).toString().split("\n");

// 왼쪽 숫자에 입력받은 숫자 ex) 26 / 오른쪽 숫자와 사이클의 길이는 0으로 초기화
let leftNumber = inputNumber;
let newNumber = 0;
let cycle = 0;

for (let i = 0; ; i++) {
  // 왼쪽 10의자리 수 + 1의자리 수 = 오른쪽 숫자 ex) 2 + 6 = 8
  let rightNumber = Math.floor(leftNumber / 10) + (leftNumber % 10);

  // ex) 왼쪽 1의자리 수 * 10 + 오른쪽 1의자리 수 = 새로운 숫자 ex) 2'6' + 0'8' = 68
  newNumber = (leftNumber % 10) * 10 + (rightNumber % 10);

  // 새로 구한 숫자를 왼쪽 숫자로 교체
  leftNumber = newNumber;

  // 사이클 1회 증가
  cycle++;

  // 새로운 숫자와 입력받은 숫자가 같으면 종료
  if (inputNumber === newNumber) {
    break;
  }
}

console.log(cycle);

// let count = 0;

// while(true){
//     let sum = parseInt((parseInt(input/10)) + (input % 10) %10)
//     let num = (input % 10)*10 + (sum % 10)
//     input = num;
//     count ++
//     if(result === num) break;
// }
